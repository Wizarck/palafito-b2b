name: CI/CD Pipeline - Palafito B2B

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

env:
  PHP_VERSION: '8.2'
  NODE_VERSION: '18'
  WP_VERSION: 'latest'
  MYSQL_ROOT_PASSWORD: 'root_password'
  MYSQL_DATABASE: 'palafito_test'
  MYSQL_USER: 'palafito_user'
  MYSQL_PASSWORD: 'palafito_pass'

jobs:
  # Job de análisis de código y linting
  code-quality:
    name: 🔍 Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🐘 Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, dom, filter, gd, iconv, json, mbstring, pdo, mysql, redis
        coverage: xdebug
        tools: composer:v2

    - name: 📦 Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-

    - name: 🔧 Install Composer dependencies
      run: composer install --prefer-dist --no-progress --no-interaction

    - name: ✅ Validate composer.json
      run: composer validate --strict

    - name: 🔍 Run PHPCS (WordPress Coding Standards)
      run: |
        composer lint
        echo "::notice::PHPCS analysis completed"

    - name: 🔐 Security scan with Semgrep
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten

  # Job de testing con matriz de versiones
  testing:
    name: 🧪 Testing PHP ${{ matrix.php }} | WP ${{ matrix.wordpress }} | WC ${{ matrix.woocommerce }}
    runs-on: ubuntu-latest
    needs: code-quality

    strategy:
      matrix:
        php: ['8.1', '8.2', '8.3']
        wordpress: ['6.3', '6.4', 'latest']
        woocommerce: ['8.0', '8.5', 'latest']
      fail-fast: false

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: palafito_test
          MYSQL_USER: palafito_user
          MYSQL_PASSWORD: palafito_pass
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐘 Setup PHP ${{ matrix.php }}
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php }}
        extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, dom, filter, gd, json, mysqli, redis
        coverage: xdebug
        tools: composer:v2, wp-cli

    - name: 📦 Install dependencies
      run: composer install --prefer-dist --no-progress --no-interaction

    - name: 🔧 Setup WordPress ${{ matrix.wordpress }}
      run: |
        wp core download --version=${{ matrix.wordpress }} --path=/tmp/wordpress --allow-root
        wp config create --dbname=palafito_test --dbuser=palafito_user --dbpass=palafito_pass --dbhost=127.0.0.1 --path=/tmp/wordpress --allow-root
        wp core install --url=http://localhost --title="Test Site" --admin_user=admin --admin_password=admin --admin_email=admin@test.com --path=/tmp/wordpress --allow-root

    - name: 🛒 Install WooCommerce ${{ matrix.woocommerce }}
      run: |
        wp plugin install woocommerce --version=${{ matrix.woocommerce }} --path=/tmp/wordpress --allow-root
        wp plugin activate woocommerce --path=/tmp/wordpress --allow-root

    - name: 📄 Install PDF Invoices Plugin
      run: |
        wp plugin install woocommerce-pdf-invoices-packing-slips --path=/tmp/wordpress --allow-root
        wp plugin activate woocommerce-pdf-invoices-packing-slips --path=/tmp/wordpress --allow-root

    - name: 🔌 Setup Palafito Plugin
      run: |
        cp -r wp-content/plugins/palafito-wc-extensions /tmp/wordpress/wp-content/plugins/
        wp plugin activate palafito-wc-extensions --path=/tmp/wordpress --allow-root

    - name: 🧪 Run Sync Functionality Tests
      run: |
        cd /tmp/wordpress
        wp eval 'include_once(WP_CONTENT_DIR . "/plugins/palafito-wc-extensions/tests/test-sync-functionality.php"); $test = new PalafitoSyncTest(); $test->setUp(); $test->test_packing_slip_to_entregado_sync(); echo "✅ Sync test passed\n";' --path=/tmp/wordpress --allow-root

    - name: 🔍 Test Order Meta Synchronization
      run: |
        cd /tmp/wordpress
        wp post create --post_type=shop_order --post_status=wc-processing --post_title="Test Order" --porcelain --path=/tmp/wordpress --allow-root > /tmp/order_id.txt
        ORDER_ID=$(cat /tmp/order_id.txt)
        wp post meta update $ORDER_ID _wcpdf_packing-slip_date '2025-01-15' --path=/tmp/wordpress --allow-root
        ENTREGADO_DATE=$(wp post meta get $ORDER_ID _entregado_date --path=/tmp/wordpress --allow-root)
        echo "Testing synchronization for Order ID: $ORDER_ID"
        echo "Packing slip date set to: 2025-01-15"
        echo "Entregado date result: $ENTREGADO_DATE"
        if [ "$ENTREGADO_DATE" = "2025-01-15" ]; then
          echo "✅ Synchronization test PASSED"
        else
          echo "❌ Synchronization test FAILED"
          exit 1
        fi

    - name: 📊 Upload coverage reports
      if: matrix.php == '8.2' && matrix.wordpress == 'latest'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: palafito-b2b-coverage

  # Job de deployment a producción
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [code-quality, testing]
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    environment: production

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup deployment tools
      run: |
        sudo apt-get update
        sudo apt-get install -y rsync openssh-client
        mkdir -p ~/.ssh
        echo "${{ secrets.PRODUCTION_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.PRODUCTION_HOST }} >> ~/.ssh/known_hosts

    - name: 🚨 Create production backup
      run: |
        ssh ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
          cd /var/www/palafito.com
          
          # Backup database
          wp db export backups/pre-deploy-$(date +%Y%m%d-%H%M%S).sql --allow-root
          
          # Backup plugin files
          tar -czf backups/palafito-plugin-$(date +%Y%m%d-%H%M%S).tar.gz wp-content/plugins/palafito-wc-extensions/
          
          echo "✅ Production backup completed"
        EOF

    - name: 📦 Prepare production package
      run: |
        # Crear paquete de producción optimizado
        tar -czf palafito-production.tar.gz \
          --exclude='.git*' \
          --exclude='node_modules' \
          --exclude='tests' \
          --exclude='docker*' \
          --exclude='*.md' \
          --exclude='phpunit.xml' \
          --exclude='composer.lock' \
          wp-content/plugins/palafito-wc-extensions/

    - name: 🌟 Deploy to production server
      run: |
        scp palafito-production.tar.gz ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }}:/tmp/
        ssh ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
          cd /var/www/palafito.com
          
          # Activar modo mantenimiento
          wp maintenance-mode activate --allow-root
          
          # Backup actual plugin antes de reemplazar
          cp -r wp-content/plugins/palafito-wc-extensions wp-content/plugins/palafito-wc-extensions.backup.$(date +%Y%m%d-%H%M%S)
          
          # Extract new version
          tar -xzf /tmp/palafito-production.tar.gz -C .
          
          # Set correct permissions
          chown -R www-data:www-data wp-content/plugins/palafito-wc-extensions
          chmod -R 755 wp-content/plugins/palafito-wc-extensions
          
          # Verificar integridad del plugin
          wp plugin status palafito-wc-extensions --allow-root
          
          # Clear all caches
          wp cache flush --allow-root
          wp rewrite flush --allow-root
          
          # Reactivar plugin para asegurar que los hooks se cargan
          wp plugin deactivate palafito-wc-extensions --allow-root
          wp plugin activate palafito-wc-extensions --allow-root
          
          # Verificar que no hay errores críticos
          wp doctor check --allow-root || echo "Warning: Doctor check found issues"
          
          # Desactivar modo mantenimiento
          wp maintenance-mode deactivate --allow-root
          
          echo "✅ Production deployment completed"
        EOF

    - name: 🔍 Production health checks
      run: |
        sleep 15
        
        # Verificar que el sitio principal responde
        curl -f https://palafito.com/wp-admin/admin-ajax.php?action=heartbeat || exit 1
        
        # Verificar API de WooCommerce
        curl -f https://palafito.com/wp-json/wc/v3/ || exit 1
        
        # Verificar que no hay errores en el log
        ssh ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} "tail -10 /var/www/palafito.com/wp-content/debug.log | grep -i 'fatal\|error' && exit 1 || echo 'No critical errors found'"
        
        echo "✅ Production health checks passed"

    - name: 📊 Post-deployment monitoring
      run: |
        # Enviar notificación a Slack/Teams (opcional)
        curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"🌟 Palafito B2B Plugin deployed to production successfully! Version: '${{ github.sha }}'"}' \
          ${{ secrets.SLACK_WEBHOOK_URL }} || echo "Notification failed"

    - name: 🏷️ Create release tag
      if: success()
      run: |
        git tag -a "v$(date +%Y.%m.%d-%H%M)" -m "Production deployment $(date +%Y-%m-%d\ %H:%M:%S)"
        git push origin --tags